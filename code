Show Def.


// Computing operators

Def II := I \otimes I.

Test CX[p q] CX[q p] CX[p q] = SWAP[p q].

Test P0 \otimes P1 <= II.

Test P0[p] \vee Pp[q] = I[p].


// Subprograms and proofs.

Def prog := Prog X[x].
Show prog.

Refine pfsub : [pre : P0[x], post: P1[x]].

    Step proc prog.

End.
Show pfsub.

Def rho1 := [[proc pfsub]](P0[x]).
Show rho1.





// The example in the draft.

Def Inv0 := ((I \otimes I - P00)[q0 q1] \otimes Omega[t t']) \vee (P00[q0 q1] \otimes (Rztheta[t] Omega[t t'] Rztheta[t]^\dagger)).


Refine pf' : [pre : Omega[t t'], post: Rztheta[t] Omega[t t'] Rztheta[t]^\dagger].

    Step 
        [pre : Omega[t t'], post: (I \otimes I - P00)[q0 q1] \otimes Omega[t t']];[pre : (I \otimes I - P00)[q0 q1] \otimes Omega[t t'], post: Rztheta[t] Omega[t t'] Rztheta[t]^\dagger].

    Step 
        [q0 q1] :=0; X[q0].

    

    Step 
        [pre: IQOPT Inv0, post: P00[q0 q1] \SasakiConjunct IQOPT Inv0].

    Step 
        while (I \otimes I - P00)[q0 q1] do
            [pre: (I \otimes I - P00)[q0 q1] \otimes Omega[t t'], post: IQOPT Inv0]
        end.

    Step 
        [q0 q1] :=0; [pre: P00[q0 q1] \otimes Omega[t t'], post: IQOPT Inv0].

    Step 
        H[q0]; H[q1];[pre: Pp[q0] \otimes Pp[q1] \otimes Omega[t t'], post: IQOPT Inv0].

    Step
        CCX[q0 q1 t]; S[t]; CCX[q0 q1 t];
        // problem?
        H[q0]; H[q1];
        if (I \otimes I - P00)[q0 q1] then
            Z[t]
        else
            skip
        end.
End.


// simplified style.

Refine pf : [pre : Omega[t t'], post: Rztheta[t] Omega[t t'] Rztheta[t]^\dagger].


    Step Seq (I \otimes I - P00)[q0 q1] Omega[t t'].

    Step 
        [q0 q1] :=0; X[q0].


    Step 
        While (I \otimes I - P00)[q0 q1] 
        Inv IQOPT Inv0.

    Step 
        [q0 q1] :=0; [pre: P00[q0 q1] \otimes Omega[t t'], post: IQOPT Inv0].

    Step 
        H[q0]; H[q1];
        [pre: Pp[q0] \otimes Pp[q1] \otimes Omega[t t'], post: IQOPT Inv0].

    Step
        CCX[q0 q1 t]; S[t]; CCX[q0 q1 t];
        // problem?
        H[q0]; H[q1];
        if (I \otimes I - P00)[q0 q1] then
            Z[t]
        else
            skip
        end.
End.

Def pfextract := Extract pf.
Show pfextract.

Def rho2 := [[proc pf]](Pp[t]).
Show rho2.